// This file is auto-generated by @hey-api/openapi-ts

import { type Options, station, trainsForStation, stopsForStation, stations, train, trains, trainById, messagesForDateAndCode, messagesForTrain, statusCodes } from '../sdk.gen';
import { queryOptions } from '@tanstack/react-query';
import type { StationData, TrainsForStationData, StopsForStationData, StationsData, TrainData, TrainsData, TrainByIdData, MessagesForDateAndCodeData, MessagesForTrainData, StatusCodesData } from '../types.gen';
import { client } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
        tags?: ReadonlyArray<string>;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean, tags?: ReadonlyArray<string>): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: options?.baseUrl || (options?.client ?? client).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (tags) {
        params.tags = tags;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const stationQueryKey = (options: Options<StationData>) => createQueryKey('station', options);

export const stationOptions = (options: Options<StationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await station({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: stationQueryKey(options)
    });
};

export const trainsForStationQueryKey = (options: Options<TrainsForStationData>) => createQueryKey('trainsForStation', options);

export const trainsForStationOptions = (options: Options<TrainsForStationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await trainsForStation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: trainsForStationQueryKey(options)
    });
};

export const stopsForStationQueryKey = (options: Options<StopsForStationData>) => createQueryKey('stopsForStation', options);

export const stopsForStationOptions = (options: Options<StopsForStationData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await stopsForStation({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: stopsForStationQueryKey(options)
    });
};

export const stationsQueryKey = (options?: Options<StationsData>) => createQueryKey('stations', options);

export const stationsOptions = (options?: Options<StationsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await stations({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: stationsQueryKey(options)
    });
};

export const trainQueryKey = (options: Options<TrainData>) => createQueryKey('train', options);

export const trainOptions = (options: Options<TrainData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await train({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: trainQueryKey(options)
    });
};

export const trainsQueryKey = (options: Options<TrainsData>) => createQueryKey('trains', options);

export const trainsOptions = (options: Options<TrainsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await trains({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: trainsQueryKey(options)
    });
};

export const trainByIdQueryKey = (options: Options<TrainByIdData>) => createQueryKey('trainById', options);

export const trainByIdOptions = (options: Options<TrainByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await trainById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: trainByIdQueryKey(options)
    });
};

export const messagesForDateAndCodeQueryKey = (options: Options<MessagesForDateAndCodeData>) => createQueryKey('messagesForDateAndCode', options);

export const messagesForDateAndCodeOptions = (options: Options<MessagesForDateAndCodeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await messagesForDateAndCode({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: messagesForDateAndCodeQueryKey(options)
    });
};

export const messagesForTrainQueryKey = (options: Options<MessagesForTrainData>) => createQueryKey('messagesForTrain', options);

export const messagesForTrainOptions = (options: Options<MessagesForTrainData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await messagesForTrain({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: messagesForTrainQueryKey(options)
    });
};

export const statusCodesQueryKey = (options?: Options<StatusCodesData>) => createQueryKey('statusCodes', options);

export const statusCodesOptions = (options?: Options<StatusCodesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await statusCodes({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: statusCodesQueryKey(options)
    });
};
